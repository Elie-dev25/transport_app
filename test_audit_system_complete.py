#!/usr/bin/env python3
"""
Test complet du nouveau syst√®me d'audit intelligent
Teste toutes les fonctionnalit√©s : impression, alertes, statistiques
"""

import os
import sys
import time
from datetime import datetime

# Ajouter le r√©pertoire parent au path pour importer les modules de l'app
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.utils.audit_logger import *

def test_print_auditing():
    """Test de l'audit d'impression"""
    print("üñ®Ô∏è  TEST AUDIT D'IMPRESSION")
    print("=" * 50)
    
    # Test impression vidange
    log_document_printed('vidange', 'BUS001', 'Table de gestion vidange')
    print("‚úÖ Impression vidange audit√©e")
    
    # Test impression carburation
    log_document_printed('carburation', 'BUS002', 'Table de gestion carburation')
    print("‚úÖ Impression carburation audit√©e")
    
    # Test impression chauffeurs
    log_document_printed('chauffeur', None, 'Liste des chauffeurs')
    print("‚úÖ Impression chauffeurs audit√©e")
    
    # Test impression bus
    log_document_printed('bus', 'BUS003', 'D√©tail du bus')
    print("‚úÖ Impression bus audit√©e")
    
    # Test impression rapport
    log_document_printed('rapport', 'RAPPORT_001', 'Rapport mensuel')
    print("‚úÖ Impression rapport audit√©e")
    
    print()

def test_all_roles_actions():
    """Test des actions pour tous les r√¥les"""
    print("üë• TEST ACTIONS TOUS R√îLES")
    print("=" * 50)
    
    roles = ['ADMIN', 'RESPONSABLE', 'SUPERVISEUR', 'CHARGE', 'CHAUFFEUR', 'MECANICIEN']
    
    for role in roles:
        # Simuler une session utilisateur
        from flask import session
        try:
            session['user_id'] = f'user_{role.lower()}'
            session['user_role'] = role
        except:
            # Si pas de contexte Flask, simuler
            pass
        
        # Actions de test pour chaque r√¥le
        if role == 'ADMIN':
            log_user_created(user_id='new_user_123', new_role='CHAUFFEUR', details='Nouvel employ√©')
            log_config_changed(config_type='system', details='Param√®tres syst√®me modifi√©s')
            
        elif role == 'RESPONSABLE':
            log_crud_action(AuditActionType.UPDATE, 'bus', 'BUS001', 'Maintenance programm√©e')
            log_sensitive_access('admin_function', 'create_user', 'Cr√©ation utilisateur')
            
        elif role == 'SUPERVISEUR':
            log_crud_action(AuditActionType.CREATE, 'trajet', 'TRAJET_001', 'Nouveau trajet cr√©√©')
            log_sensitive_access('supervisor_function', 'view_reports', 'Consultation rapports')
            
        elif role == 'CHARGE':
            log_crud_action(AuditActionType.UPDATE, 'trajet', 'TRAJET_002', 'Horaires modifi√©s')
            
        elif role == 'CHAUFFEUR':
            log_crud_action(AuditActionType.CREATE, 'vidange', 'VID_001', 'Vidange effectu√©e')
            
        elif role == 'MECANICIEN':
            log_crud_action(AuditActionType.UPDATE, 'maintenance', 'MAINT_001', 'R√©paration termin√©e')
        
        print(f"‚úÖ Actions {role} audit√©es")
    
    print()

def test_security_violations():
    """Test des violations de s√©curit√©"""
    print("üö® TEST VIOLATIONS S√âCURIT√â")
    print("=" * 50)
    
    # Test acc√®s non autoris√©
    log_unauthorized_access('admin_panel', 'Tentative acc√®s admin par CHAUFFEUR')
    print("‚úÖ Acc√®s non autoris√© audit√©")
    
    # Test violation s√©curit√©
    log_security_violation('sql_injection', 'Tentative injection SQL d√©tect√©e')
    print("‚úÖ Violation s√©curit√© audit√©e")
    
    # Test erreur syst√®me
    log_system_error('database_connection', 'Connexion DB √©chou√©e')
    print("‚úÖ Erreur syst√®me audit√©e")
    
    print()

def test_authentication_events():
    """Test des √©v√©nements d'authentification"""
    print("üîê TEST AUTHENTIFICATION")
    print("=" * 50)
    
    # Test connexions r√©ussies
    for role in ['ADMIN', 'RESPONSABLE', 'SUPERVISEUR']:
        log_login_success(f'user_{role.lower()}', role, f'Connexion {role}')
        print(f"‚úÖ Connexion {role} audit√©e")
    
    # Test connexions √©chou√©es
    log_login_failed('admin_test', 'Mot de passe incorrect')
    log_login_failed('hacker', 'Utilisateur inexistant')
    print("‚úÖ Connexions √©chou√©es audit√©es")
    
    # Test d√©connexions
    for role in ['ADMIN', 'RESPONSABLE']:
        log_logout(f'user_{role.lower()}', role)
        print(f"‚úÖ D√©connexion {role} audit√©e")
    
    print()

def display_audit_files():
    """Afficher le contenu des fichiers d'audit"""
    print("üìÅ FICHIERS D'AUDIT G√âN√âR√âS")
    print("=" * 50)
    
    audit_dir = os.path.join('logs', 'audit')
    if not os.path.exists(audit_dir):
        print("‚ùå R√©pertoire d'audit non trouv√©")
        return
    
    for filename in sorted(os.listdir(audit_dir)):
        if filename.startswith('audit_') and filename.endswith('.log'):
            role = filename.replace('audit_', '').replace('.log', '').upper()
            filepath = os.path.join(audit_dir, filename)
            
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                print(f"\nüìã {role} ({len(lines)} entr√©es)")
                print("-" * 30)
                
                # Afficher les 3 derni√®res entr√©es
                for line in lines[-3:]:
                    if line.strip():
                        print(f"  {line.strip()}")
                        
            except Exception as e:
                print(f"‚ùå Erreur lecture {filename}: {e}")
    
    print()

def test_statistics():
    """Test des statistiques d'audit"""
    print("üìä TEST STATISTIQUES")
    print("=" * 50)
    
    try:
        stats = get_role_statistics()
        
        for role, role_stats in stats.items():
            print(f"{role}:")
            print(f"  Total: {role_stats.get('total', 0)}")
            print(f"  Succ√®s: {role_stats.get('success_rate', 100)}%")
            print(f"  Niveaux: {role_stats.get('levels', {})}")
            print()
            
    except Exception as e:
        print(f"‚ùå Erreur statistiques: {e}")

def main():
    """Fonction principale de test"""
    print("üéØ TEST COMPLET SYST√àME D'AUDIT INTELLIGENT")
    print("=" * 60)
    print(f"D√©marrage: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Cr√©er le r√©pertoire d'audit s'il n'existe pas
    os.makedirs(os.path.join('logs', 'audit'), exist_ok=True)
    
    # Ex√©cuter tous les tests
    test_print_auditing()
    test_all_roles_actions()
    test_security_violations()
    test_authentication_events()
    
    # Attendre un peu pour que les logs soient √©crits
    time.sleep(1)
    
    # Afficher les r√©sultats
    display_audit_files()
    test_statistics()
    
    print("üéâ TESTS TERMIN√âS AVEC SUCC√àS!")
    print("=" * 60)
    print("Le nouveau syst√®me d'audit intelligent est op√©rationnel !")
    print()
    print("üìã Fonctionnalit√©s test√©es:")
    print("  ‚úÖ Audit d'impression de documents")
    print("  ‚úÖ Actions des 6 r√¥les utilisateur")
    print("  ‚úÖ Violations de s√©curit√©")
    print("  ‚úÖ √âv√©nements d'authentification")
    print("  ‚úÖ Fichiers de logs s√©par√©s par r√¥le")
    print("  ‚úÖ Statistiques et niveaux de criticit√©")
    print()
    print("üîç V√©rifiez les fichiers dans logs/audit/")

if __name__ == '__main__':
    main()
