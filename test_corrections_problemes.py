#!/usr/bin/env python3
"""
Script de test pour v√©rifier les corrections des probl√®mes identifi√©s
1. Bouton d√©pannage admin
2. Ic√¥ne ajouter document plus expressive  
3. Statuts documents m√©canicien
"""

import sys
import os
import re
from pathlib import Path

def test_bouton_depannage_admin():
    """Teste que le bouton d√©pannage admin utilise la modal partag√©e"""
    print("üîß TEST BOUTON D√âPANNAGE ADMIN")
    print("=" * 50)
    
    template_file = Path("app/templates/roles/admin/bus_udm.html")
    
    if not template_file.exists():
        print("‚ùå Template admin bus_udm.html non trouv√©")
        return False
        
    with open(template_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que la modal partag√©e est incluse
    has_shared_modal = 'shared/modals/_declaration_panne_modal.html' in content
    print(f"   {'‚úÖ' if has_shared_modal else '‚ùå'} Modal partag√©e incluse")
    
    # V√©rifier qu'il n'y a plus de modal inline
    has_inline_modal = 'id="panneModal"' in content and '<div id="panneModal"' in content
    print(f"   {'‚ùå' if has_inline_modal else '‚úÖ'} Plus de modal inline")
    
    # V√©rifier la fonction openPanneModal
    has_open_function = 'window.openPanneModal' in content
    print(f"   {'‚úÖ' if has_open_function else '‚ùå'} Fonction openPanneModal pr√©sente")
    
    # V√©rifier le bouton dans le tableau
    has_button = 'onclick="openPanneModal(' in content
    print(f"   {'‚úÖ' if has_button else '‚ùå'} Bouton dans tableau pr√©sent")
    
    success = has_shared_modal and not has_inline_modal and has_open_function and has_button
    print(f"\n   üéØ R√âSULTAT: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    return success

def test_icone_document_expressive():
    """Teste que l'ic√¥ne ajouter document est plus expressive"""
    print("\nüé® TEST IC√îNE DOCUMENT EXPRESSIVE")
    print("=" * 50)
    
    templates_to_check = [
        "app/templates/roles/admin/bus_udm.html",
        "app/templates/pages/bus_udm.html"
    ]
    
    success = True
    
    for template_path in templates_to_check:
        template_file = Path(template_path)
        print(f"\nüìÑ {template_file.name}")
        
        if not template_file.exists():
            print("   ‚ùå Template non trouv√©")
            success = False
            continue
            
        with open(template_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier l'ic√¥ne file-plus
        has_file_plus = 'fa-file-plus' in content
        print(f"   {'‚úÖ' if has_file_plus else '‚ùå'} Ic√¥ne fa-file-plus utilis√©e")
        
        # V√©rifier le titre explicite
        has_explicit_title = 'Ajouter un document administratif' in content
        print(f"   {'‚úÖ' if has_explicit_title else '‚ùå'} Titre explicite pr√©sent")
        
        # V√©rifier qu'il n'y a plus de fa-plus g√©n√©rique pour les documents
        doc_button_pattern = r'onclick="openDocModal\([^)]*\)"[^>]*>\s*<i class="fas fa-plus"'
        has_generic_plus = re.search(doc_button_pattern, content)
        print(f"   {'‚ùå' if has_generic_plus else '‚úÖ'} Plus d\'ic√¥ne + g√©n√©rique")
        
        if not (has_file_plus and has_explicit_title and not has_generic_plus):
            success = False
    
    print(f"\n   üéØ R√âSULTAT: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    return success

def test_statuts_documents_mecanicien():
    """Teste que les statuts documents sont calcul√©s pour m√©canicien"""
    print("\nüìã TEST STATUTS DOCUMENTS M√âCANICIEN")
    print("=" * 50)
    
    routes_to_check = [
        ("app/routes/mecanicien.py", "m√©canicien"),
        ("app/routes/charge_transport.py", "charg√© de transport")
    ]
    
    success = True
    
    for route_path, role_name in routes_to_check:
        route_file = Path(route_path)
        print(f"\nüìÑ Route {role_name}")
        
        if not route_file.exists():
            print("   ‚ùå Route non trouv√©e")
            success = False
            continue
            
        with open(route_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier le calcul des statuts
        has_status_calc = 'status = \'ROUGE\'' in content and 'status = \'ORANGE\'' in content
        print(f"   {'‚úÖ' if has_status_calc else '‚ùå'} Calcul des statuts pr√©sent")
        
        # V√©rifier la logique d'expiration
        has_expiration_logic = 'today > d.date_expiration' in content
        print(f"   {'‚úÖ' if has_expiration_logic else '‚ùå'} Logique d\'expiration pr√©sente")
        
        # V√©rifier la logique de pourcentage
        has_percentage_logic = 'ratio <= 0.10' in content
        print(f"   {'‚úÖ' if has_percentage_logic else '‚ùå'} Logique de pourcentage pr√©sente")
        
        # V√©rifier que documents est une liste avec statuts
        has_documents_list = 'documents.append({' in content and '\'status\': status' in content
        print(f"   {'‚úÖ' if has_documents_list else '‚ùå'} Liste documents avec statuts")
        
        if not (has_status_calc and has_expiration_logic and has_percentage_logic and has_documents_list):
            success = False
    
    print(f"\n   üéØ R√âSULTAT: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    return success

def test_template_details_bus():
    """Teste que le template details_bus affiche les statuts"""
    print("\nüé® TEST TEMPLATE DETAILS BUS")
    print("=" * 50)
    
    template_file = Path("app/templates/pages/details_bus.html")
    
    if not template_file.exists():
        print("‚ùå Template details_bus.html non trouv√©")
        return False
        
    with open(template_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier les conditions de statut
    has_rouge_status = "d.status == 'ROUGE'" in content
    print(f"   {'‚úÖ' if has_rouge_status else '‚ùå'} Condition statut ROUGE")
    
    has_orange_status = "d.status == 'ORANGE'" in content
    print(f"   {'‚úÖ' if has_orange_status else '‚ùå'} Condition statut ORANGE")
    
    # V√©rifier les badges de statut
    has_expire_badge = "status_badge('Expir√©', 'danger')" in content
    print(f"   {'‚úÖ' if has_expire_badge else '‚ùå'} Badge 'Expir√©'")
    
    has_bientot_badge = "status_badge('Bient√¥t expir√©', 'warning')" in content
    print(f"   {'‚úÖ' if has_bientot_badge else '‚ùå'} Badge 'Bient√¥t expir√©'")
    
    has_valide_badge = "status_badge('Valide', 'success')" in content
    print(f"   {'‚úÖ' if has_valide_badge else '‚ùå'} Badge 'Valide'")
    
    success = has_rouge_status and has_orange_status and has_expire_badge and has_bientot_badge and has_valide_badge
    print(f"\n   üéØ R√âSULTAT: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    return success

def main():
    """Fonction principale"""
    print("üß™ TEST DES CORRECTIONS DES PROBL√àMES")
    print("=" * 60)
    print("Objectif: V√©rifier que tous les probl√®mes identifi√©s sont corrig√©s")
    
    # Tests
    test1 = test_bouton_depannage_admin()
    test2 = test_icone_document_expressive()
    test3 = test_statuts_documents_mecanicien()
    test4 = test_template_details_bus()
    
    # R√©sultat final
    print("\n" + "=" * 60)
    print("üèÅ R√âSULTAT FINAL")
    print("=" * 60)
    
    total_tests = 4
    tests_reussis = sum([test1, test2, test3, test4])
    
    print(f"Tests r√©ussis: {tests_reussis}/{total_tests}")
    
    if tests_reussis == total_tests:
        print("üéâ TOUS LES PROBL√àMES SONT CORRIG√âS !")
        print("\n‚úÖ Corrections appliqu√©es:")
        print("   ‚Ä¢ Bouton d√©pannage admin utilise la modal partag√©e")
        print("   ‚Ä¢ Ic√¥ne document plus expressive (fa-file-plus)")
        print("   ‚Ä¢ Statuts documents calcul√©s pour m√©canicien et charg√©")
        print("   ‚Ä¢ Template affiche correctement les statuts")
    else:
        print("‚ö†Ô∏è  CERTAINS PROBL√àMES PERSISTENT")
        if not test1:
            print("   ‚ùå Bouton d√©pannage admin")
        if not test2:
            print("   ‚ùå Ic√¥ne document expressive")
        if not test3:
            print("   ‚ùå Statuts documents m√©canicien")
        if not test4:
            print("   ‚ùå Template details bus")
    
    print("\nüéØ TESTS √Ä EFFECTUER MANUELLEMENT:")
    print("   ‚Ä¢ Cliquer sur l'ic√¥ne panne dans le tableau admin")
    print("   ‚Ä¢ V√©rifier que l'ic√¥ne document est bien visible")
    print("   ‚Ä¢ Acc√©der aux d√©tails bus en tant que m√©canicien")
    print("   ‚Ä¢ V√©rifier les statuts des documents (Expir√©/Bient√¥t expir√©/Valide)")

if __name__ == "__main__":
    main()
