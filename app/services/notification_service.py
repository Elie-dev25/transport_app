"""
Service de notifications par email pour TransportUdM
G√®re l'envoi d'emails pour les √©v√©nements critiques du syst√®me
"""

from typing import List, Dict, Any, Optional
from datetime import datetime
from flask import current_app

from app.database import db
from app.models.utilisateur import Utilisateur
from app.models.bus_udm import BusUdM
from app.models.panne_bus_udm import PanneBusUdM
from app.models.chauffeur_statut import ChauffeurStatut
from app.utils.emailer import send_email
from app.utils.audit_logger import log_user_action


class NotificationService:
    """Service centralis√© pour les notifications par email"""
    
    # Configuration des destinataires par type de notification
    NOTIFICATION_RECIPIENTS = {
        'PANNE_DECLAREE': ['MECANICIEN', 'SUPERVISEUR', 'RESPONSABLE'],
        'VEHICULE_REPARE': ['RESPONSABLE', 'SUPERVISEUR'],
        'SEUIL_VIDANGE': ['RESPONSABLE', 'SUPERVISEUR'],
        'SEUIL_CARBURANT': ['RESPONSABLE', 'CHAUFFEUR', 'SUPERVISEUR'],
        'STATUT_CHAUFFEUR': ['CHAUFFEUR']  # Le chauffeur concern√© uniquement
    }
    
    @staticmethod
    def get_users_by_roles(roles: List[str]) -> List[Utilisateur]:
        """R√©cup√®re les utilisateurs ayant les r√¥les sp√©cifi√©s"""
        return Utilisateur.query.filter(Utilisateur.role.in_(roles)).all()
    
    @staticmethod
    def send_panne_notification(panne: PanneBusUdM, declared_by: str) -> bool:
        """
        Envoie une notification lors de la d√©claration d'une panne
        Destinataires: MECANICIEN, SUPERVISEUR, RESPONSABLE
        """
        try:
            # R√©cup√©rer les destinataires
            recipients = NotificationService.get_users_by_roles(
                NotificationService.NOTIFICATION_RECIPIENTS['PANNE_DECLAREE']
            )
            
            if not recipients:
                current_app.logger.warning("Aucun destinataire trouv√© pour notification panne")
                return False
            
            # R√©cup√©rer les informations du bus
            bus = BusUdM.query.get(panne.bus_udm_id)
            bus_info = f"Bus {bus.numero} ({bus.immatriculation})" if bus else f"Bus ID {panne.bus_udm_id}"
            
            # Pr√©parer le contenu de l'email
            subject = f"üö® Nouvelle panne d√©clar√©e - {bus_info}"
            
            body = f"""
Bonjour,

Une nouvelle panne a √©t√© d√©clar√©e dans le syst√®me TransportUdM.

üìã D√âTAILS DE LA PANNE:
‚Ä¢ V√©hicule: {bus_info}
‚Ä¢ Date/Heure: {panne.date_heure.strftime('%d/%m/%Y √† %H:%M')}
‚Ä¢ Kilom√©trage: {panne.kilometrage:,} km
‚Ä¢ Criticit√©: {panne.criticite}
‚Ä¢ Immobilisation: {'Oui' if panne.immobilisation else 'Non'}
‚Ä¢ D√©clar√©e par: {declared_by}

üìù DESCRIPTION:
{panne.description}

{'‚ö†Ô∏è ATTENTION: Ce v√©hicule est immobilis√© et ne peut pas √™tre utilis√©.' if panne.immobilisation else ''}

Veuillez prendre les mesures n√©cessaires pour traiter cette panne.

---
Syst√®me TransportUdM - Universit√© des Montagnes
Notification automatique - Ne pas r√©pondre √† cet email
            """.strip()
            
            # Envoyer l'email √† tous les destinataires
            success_count = 0
            for user in recipients:
                if user.email:
                    if send_email(subject, body, user.email):
                        success_count += 1
                        current_app.logger.info(f"Notification panne envoy√©e √† {user.email}")
                    else:
                        current_app.logger.error(f"√âchec envoi notification panne √† {user.email}")
            
            # Log de l'action
            log_user_action(
                'NOTIFICATION', 
                'send_panne_notification',
                f"Panne {panne.id} - {success_count}/{len(recipients)} emails envoy√©s"
            )
            
            return success_count > 0
            
        except Exception as e:
            current_app.logger.error(f"Erreur notification panne: {str(e)}")
            return False
    
    @staticmethod
    def send_vehicule_repare_notification(panne: PanneBusUdM, repaired_by: str) -> bool:
        """
        Envoie une notification lorsqu'un v√©hicule est r√©par√©
        Destinataires: RESPONSABLE, SUPERVISEUR
        """
        try:
            # R√©cup√©rer les destinataires
            recipients = NotificationService.get_users_by_roles(
                NotificationService.NOTIFICATION_RECIPIENTS['VEHICULE_REPARE']
            )
            
            if not recipients:
                current_app.logger.warning("Aucun destinataire trouv√© pour notification r√©paration")
                return False
            
            # R√©cup√©rer les informations du bus
            bus = BusUdM.query.get(panne.bus_udm_id)
            bus_info = f"Bus {bus.numero} ({bus.immatriculation})" if bus else f"Bus ID {panne.bus_udm_id}"
            
            # Pr√©parer le contenu de l'email
            subject = f"‚úÖ V√©hicule r√©par√© - {bus_info}"
            
            body = f"""
Bonjour,

Un v√©hicule a √©t√© r√©par√© et est de nouveau op√©rationnel.

üìã D√âTAILS DE LA R√âPARATION:
‚Ä¢ V√©hicule: {bus_info}
‚Ä¢ Panne d√©clar√©e le: {panne.date_heure.strftime('%d/%m/%Y √† %H:%M')}
‚Ä¢ R√©paration termin√©e le: {panne.date_resolution.strftime('%d/%m/%Y √† %H:%M')}
‚Ä¢ R√©par√© par: {repaired_by}
‚Ä¢ Criticit√© initiale: {panne.criticite}

üìù DESCRIPTION DE LA PANNE:
{panne.description}

‚úÖ Le v√©hicule est maintenant disponible pour les trajets.

---
Syst√®me TransportUdM - Universit√© des Montagnes
Notification automatique - Ne pas r√©pondre √† cet email
            """.strip()
            
            # Envoyer l'email √† tous les destinataires
            success_count = 0
            for user in recipients:
                if user.email:
                    if send_email(subject, body, user.email):
                        success_count += 1
                        current_app.logger.info(f"Notification r√©paration envoy√©e √† {user.email}")
                    else:
                        current_app.logger.error(f"√âchec envoi notification r√©paration √† {user.email}")
            
            # Log de l'action
            log_user_action(
                'NOTIFICATION', 
                'send_vehicule_repare_notification',
                f"R√©paration panne {panne.id} - {success_count}/{len(recipients)} emails envoy√©s"
            )
            
            return success_count > 0
            
        except Exception as e:
            current_app.logger.error(f"Erreur notification r√©paration: {str(e)}")
            return False
    
    @staticmethod
    def send_seuil_vidange_notification(bus: BusUdM, km_depuis_vidange: int, seuil: int) -> bool:
        """
        Envoie une notification lorsqu'un v√©hicule atteint le seuil critique de vidange
        Destinataires: RESPONSABLE, SUPERVISEUR
        """
        try:
            # R√©cup√©rer les destinataires
            recipients = NotificationService.get_users_by_roles(
                NotificationService.NOTIFICATION_RECIPIENTS['SEUIL_VIDANGE']
            )
            
            if not recipients:
                current_app.logger.warning("Aucun destinataire trouv√© pour notification vidange")
                return False
            
            # Pr√©parer le contenu de l'email
            subject = f"üîß Seuil vidange atteint - Bus {bus.numero}"
            
            body = f"""
Bonjour,

Un v√©hicule a atteint le seuil critique pour la vidange.

üìã D√âTAILS DU V√âHICULE:
‚Ä¢ V√©hicule: Bus {bus.numero} ({bus.immatriculation})
‚Ä¢ Kilom√©trage actuel: {bus.kilometrage:,} km
‚Ä¢ Kilom√®tres depuis derni√®re vidange: {km_depuis_vidange:,} km
‚Ä¢ Seuil critique: {seuil:,} km
‚Ä¢ D√©passement: {km_depuis_vidange - seuil:,} km

‚ö†Ô∏è ATTENTION: Ce v√©hicule n√©cessite une vidange urgente.

Veuillez programmer une intervention de maintenance dans les plus brefs d√©lais.

---
Syst√®me TransportUdM - Universit√© des Montagnes
Notification automatique - Ne pas r√©pondre √† cet email
            """.strip()
            
            # Envoyer l'email √† tous les destinataires
            success_count = 0
            for user in recipients:
                if user.email:
                    if send_email(subject, body, user.email):
                        success_count += 1
                        current_app.logger.info(f"Notification vidange envoy√©e √† {user.email}")
                    else:
                        current_app.logger.error(f"√âchec envoi notification vidange √† {user.email}")
            
            # Log de l'action
            log_user_action(
                'NOTIFICATION', 
                'send_seuil_vidange_notification',
                f"Bus {bus.numero} - {success_count}/{len(recipients)} emails envoy√©s"
            )
            
            return success_count > 0

        except Exception as e:
            current_app.logger.error(f"Erreur notification vidange: {str(e)}")
            return False

    @staticmethod
    def send_seuil_carburant_notification(bus: BusUdM, niveau_actuel: float, seuil: float) -> bool:
        """
        Envoie une notification lorsqu'un v√©hicule atteint le seuil critique de carburant
        Destinataires: RESPONSABLE, CHAUFFEUR, SUPERVISEUR
        """
        try:
            # R√©cup√©rer les destinataires
            recipients = NotificationService.get_users_by_roles(
                NotificationService.NOTIFICATION_RECIPIENTS['SEUIL_CARBURANT']
            )

            if not recipients:
                current_app.logger.warning("Aucun destinataire trouv√© pour notification carburant")
                return False

            # Calculer le pourcentage
            pourcentage = (niveau_actuel / bus.capacite_reservoir_litres * 100) if bus.capacite_reservoir_litres else 0

            # Pr√©parer le contenu de l'email
            subject = f"‚õΩ Seuil carburant critique - Bus {bus.numero}"

            body = f"""
Bonjour,

Un v√©hicule a atteint le seuil critique de carburant.

üìã D√âTAILS DU V√âHICULE:
‚Ä¢ V√©hicule: Bus {bus.numero} ({bus.immatriculation})
‚Ä¢ Niveau actuel: {niveau_actuel:.1f} L ({pourcentage:.1f}%)
‚Ä¢ Capacit√© totale: {bus.capacite_reservoir_litres:.1f} L
‚Ä¢ Seuil critique: {seuil:.1f}%
‚Ä¢ Kilom√©trage: {bus.kilometrage:,} km

‚ö†Ô∏è ATTENTION: Ce v√©hicule n√©cessite un ravitaillement urgent.

Veuillez proc√©der au ravitaillement avant le prochain trajet.

---
Syst√®me TransportUdM - Universit√© des Montagnes
Notification automatique - Ne pas r√©pondre √† cet email
            """.strip()

            # Envoyer l'email √† tous les destinataires
            success_count = 0
            for user in recipients:
                if user.email:
                    if send_email(subject, body, user.email):
                        success_count += 1
                        current_app.logger.info(f"Notification carburant envoy√©e √† {user.email}")
                    else:
                        current_app.logger.error(f"√âchec envoi notification carburant √† {user.email}")

            # Log de l'action
            log_user_action(
                'NOTIFICATION',
                'send_seuil_carburant_notification',
                f"Bus {bus.numero} - {success_count}/{len(recipients)} emails envoy√©s"
            )

            return success_count > 0

        except Exception as e:
            current_app.logger.error(f"Erreur notification carburant: {str(e)}")
            return False

    @staticmethod
    def send_statut_chauffeur_notification(chauffeur_statut: ChauffeurStatut, chauffeur_email: str) -> bool:
        """
        Envoie une notification au chauffeur lors de l'affectation d'un statut
        Destinataire: Le chauffeur concern√© uniquement
        """
        try:
            if not chauffeur_email:
                current_app.logger.warning("Email chauffeur manquant pour notification statut")
                return False

            # R√©cup√©rer les informations du chauffeur
            from app.models.chauffeur import Chauffeur
            chauffeur = Chauffeur.query.get(chauffeur_statut.chauffeur_id)
            chauffeur_nom = f"{chauffeur.prenom} {chauffeur.nom}" if chauffeur else f"Chauffeur ID {chauffeur_statut.chauffeur_id}"

            # Mapper les statuts en fran√ßais
            statuts_fr = {
                'CONGE': 'Cong√©',
                'PERMANENCE': 'Permanence',
                'SERVICE_WEEKEND': 'Service Weekend',
                'SERVICE_SEMAINE': 'Service Semaine'
            }

            lieux_fr = {
                'CUM': 'CUM (Centre Urbain de Mbouda)',
                'CAMPUS': 'Campus Universitaire',
                'CONJOINTEMENT': 'CUM et Campus (Conjointement)'
            }

            statut_fr = statuts_fr.get(chauffeur_statut.statut, chauffeur_statut.statut)
            lieu_fr = lieux_fr.get(chauffeur_statut.lieu, chauffeur_statut.lieu)

            # Pr√©parer le contenu de l'email
            subject = f"üìã Nouveau statut affect√© - {statut_fr}"

            body = f"""
Bonjour {chauffeur_nom},

Un nouveau statut vous a √©t√© affect√© dans le syst√®me TransportUdM.

üìã D√âTAILS DE VOTRE AFFECTATION:
‚Ä¢ Statut: {statut_fr}
‚Ä¢ Lieu d'affectation: {lieu_fr}
‚Ä¢ Date de d√©but: {chauffeur_statut.date_debut.strftime('%d/%m/%Y √† %H:%M')}
‚Ä¢ Date de fin: {chauffeur_statut.date_fin.strftime('%d/%m/%Y √† %H:%M')}
‚Ä¢ Affect√© le: {chauffeur_statut.created_at.strftime('%d/%m/%Y √† %H:%M')}

üìù INSTRUCTIONS:
{NotificationService._get_statut_instructions(chauffeur_statut.statut, chauffeur_statut.lieu)}

Pour toute question concernant votre affectation, veuillez contacter votre responsable.

---
Syst√®me TransportUdM - Universit√© des Montagnes
Notification automatique - Ne pas r√©pondre √† cet email
            """.strip()

            # Envoyer l'email
            if send_email(subject, body, chauffeur_email):
                current_app.logger.info(f"Notification statut envoy√©e √† {chauffeur_email}")

                # Log de l'action
                log_user_action(
                    'NOTIFICATION',
                    'send_statut_chauffeur_notification',
                    f"Statut {chauffeur_statut.statut} chauffeur {chauffeur_statut.chauffeur_id} - Email envoy√©"
                )

                return True
            else:
                current_app.logger.error(f"√âchec envoi notification statut √† {chauffeur_email}")
                return False

        except Exception as e:
            current_app.logger.error(f"Erreur notification statut chauffeur: {str(e)}")
            return False

    @staticmethod
    def _get_statut_instructions(statut: str, lieu: str) -> str:
        """Retourne les instructions sp√©cifiques selon le statut et le lieu"""
        instructions = {
            'CONGE': "Vous √™tes en cong√©. Profitez bien de votre repos !",
            'PERMANENCE': "Vous √™tes de permanence. Restez disponible pour les urgences et interventions.",
            'SERVICE_WEEKEND': "Vous √™tes affect√© au service weekend. Assurez-vous d'√™tre disponible samedi et dimanche.",
            'SERVICE_SEMAINE': "Vous √™tes affect√© au service semaine. Assurez-vous d'√™tre disponible du lundi au vendredi."
        }

        base_instruction = instructions.get(statut, "Veuillez vous conformer √† votre affectation.")

        if lieu == 'CUM':
            lieu_instruction = "Votre lieu d'affectation est le Centre Urbain de Mbouda (CUM)."
        elif lieu == 'CAMPUS':
            lieu_instruction = "Votre lieu d'affectation est le Campus Universitaire."
        elif lieu == 'CONJOINTEMENT':
            lieu_instruction = "Vous devez assurer le service entre le CUM et le Campus selon les besoins."
        else:
            lieu_instruction = ""

        return f"{base_instruction}\n{lieu_instruction}".strip()

    @staticmethod
    def test_email_configuration() -> Dict[str, Any]:
        """
        Teste la configuration email en envoyant un email de test
        Retourne un dictionnaire avec le statut du test
        """
        try:
            test_email = current_app.config.get('MAIL_FROM', 'elienjine15@gmail.com')
            subject = "Test de configuration email - TransportUdM"
            body = f"""
Test de configuration email r√©ussi !

Configuration actuelle:
‚Ä¢ SMTP Host: {current_app.config.get('SMTP_HOST')}
‚Ä¢ SMTP Port: {current_app.config.get('SMTP_PORT')}
‚Ä¢ From: {current_app.config.get('MAIL_FROM')}
‚Ä¢ TLS: {current_app.config.get('SMTP_USE_TLS')}

Date du test: {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}

---
Syst√®me TransportUdM - Test automatique
            """.strip()

            success = send_email(subject, body, test_email)

            return {
                'success': success,
                'message': 'Email de test envoy√© avec succ√®s' if success else '√âchec envoi email de test',
                'test_email': test_email,
                'timestamp': datetime.now().isoformat()
            }

        except Exception as e:
            return {
                'success': False,
                'message': f'Erreur test email: {str(e)}',
                'test_email': None,
                'timestamp': datetime.now().isoformat()
            }
