#!/usr/bin/env python3
"""
Test complet de la page des param√®tres
"""

import os
import sys
sys.path.append('.')

def test_parametres_page():
    """Test de la page des param√®tres"""
    
    print("üß™ Test de la page des param√®tres...")
    
    try:
        from app import create_app
        from flask import url_for
        
        app = create_app()
        
        with app.test_client() as client:
            with app.app_context():
                
                # Test 1: Acc√®s Admin
                print("\n1. Test acc√®s Admin...")
                with client.session_transaction() as sess:
                    sess['user_id'] = 'admin'
                    sess['user_role'] = 'ADMIN'
                    sess['user_nom'] = 'Admin'
                    sess['user_prenom'] = 'System'
                
                response = client.get('/admin/parametres')
                print(f"   Status: {response.status_code}")
                
                if response.status_code == 200:
                    content = response.data.decode()
                    
                    # V√©rifications du contenu
                    checks = [
                        ('Audit & Tra√ßabilit√©', 'Section audit pr√©sente'),
                        ('Gestion Utilisateurs', 'Section utilisateurs pr√©sente'),
                        ('Gestion des Identifiants', 'Section identifiants pr√©sente'),
                        ('Gestion de Session', 'Section session pr√©sente'),
                        ('parametres.css', 'CSS charg√©'),
                        ('parametres.js', 'JavaScript charg√©')
                    ]
                    
                    for check, desc in checks:
                        if check in content:
                            print(f"   ‚úÖ {desc}")
                        else:
                            print(f"   ‚ùå {desc} - MANQUANT")
                
                # Test 2: Acc√®s Responsable
                print("\n2. Test acc√®s Responsable...")
                with client.session_transaction() as sess:
                    sess['user_role'] = 'RESPONSABLE'
                
                response = client.get('/responsable/parametres')
                print(f"   Status: {response.status_code}")
                
                if response.status_code in [200, 302]:
                    print("   ‚úÖ Acc√®s responsable OK")
                else:
                    print("   ‚ùå Acc√®s responsable √©chou√©")
                
                # Test 3: Acc√®s Superviseur
                print("\n3. Test acc√®s Superviseur...")
                with client.session_transaction() as sess:
                    sess['user_role'] = 'SUPERVISEUR'
                
                response = client.get('/admin/parametres')
                print(f"   Status: {response.status_code}")
                
                if response.status_code == 200:
                    content = response.data.decode()
                    # Le superviseur ne doit pas voir la section identifiants
                    if 'Gestion des Identifiants' not in content:
                        print("   ‚úÖ Superviseur n'a pas acc√®s aux identifiants")
                    else:
                        print("   ‚ùå Superviseur a acc√®s aux identifiants (erreur)")
                
                # Test 4: APIs
                print("\n4. Test des APIs...")
                
                # API Stats
                response = client.get('/admin/api/audit/stats')
                print(f"   API Stats: {response.status_code}")
                
                # API Logs
                response = client.get('/admin/api/audit/logs?limit=10')
                print(f"   API Logs: {response.status_code}")
                
                # API Users (Admin/Responsable uniquement)
                with client.session_transaction() as sess:
                    sess['user_role'] = 'ADMIN'
                
                response = client.get('/admin/api/users')
                print(f"   API Users: {response.status_code}")
                
                print("\n‚úÖ Tests de base termin√©s!")
                
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

def test_fichiers_statiques():
    """Test de la pr√©sence des fichiers CSS et JS"""
    
    print("\nüîç V√©rification des fichiers statiques...")
    
    fichiers = [
        'app/static/css/parametres.css',
        'app/static/js/parametres.js'
    ]
    
    for fichier in fichiers:
        if os.path.exists(fichier):
            taille = os.path.getsize(fichier)
            print(f"   ‚úÖ {fichier} ({taille} bytes)")
        else:
            print(f"   ‚ùå {fichier} - MANQUANT")

def test_structure_template():
    """Test de la structure du template"""
    
    print("\nüìÑ V√©rification du template...")
    
    template_path = 'app/templates/pages/parametres.html'
    
    if not os.path.exists(template_path):
        print(f"   ‚ùå Template manquant: {template_path}")
        return
    
    with open(template_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifications de structure
    checks = [
        ('id="audit-section"', 'Section audit'),
        ('id="users-section"', 'Section utilisateurs'),
        ('id="credentials-section"', 'Section identifiants'),
        ('id="session-section"', 'Section session'),
        ('createUserModal', 'Modal cr√©ation utilisateur'),
        ('editRoleModal', 'Modal modification r√¥le'),
        ('settings-nav', 'Navigation param√®tres'),
        ('audit-logs-container', 'Container logs audit')
    ]
    
    for check, desc in checks:
        if check in content:
            print(f"   ‚úÖ {desc}")
        else:
            print(f"   ‚ùå {desc} - MANQUANT")

def test_permissions():
    """Test des permissions par r√¥le"""
    
    print("\nüîê Test des permissions...")
    
    try:
        from app import create_app
        
        app = create_app()
        
        with app.test_client() as client:
            with app.app_context():
                
                # Test acc√®s non autoris√©
                roles_tests = [
                    ('CHAUFFEUR', False, 'Chauffeur ne doit pas acc√©der'),
                    ('MECANICIEN', False, 'M√©canicien ne doit pas acc√©der'),
                    ('CHARGE', False, 'Charg√© ne doit pas acc√©der'),
                    ('ADMIN', True, 'Admin doit acc√©der'),
                    ('RESPONSABLE', True, 'Responsable doit acc√©der'),
                    ('SUPERVISEUR', True, 'Superviseur doit acc√©der')
                ]
                
                for role, should_access, desc in roles_tests:
                    with client.session_transaction() as sess:
                        sess['user_id'] = f'user_{role.lower()}'
                        sess['user_role'] = role
                        sess['user_nom'] = 'Test'
                        sess['user_prenom'] = role
                    
                    response = client.get('/admin/parametres')
                    
                    if should_access:
                        if response.status_code == 200:
                            print(f"   ‚úÖ {desc}")
                        else:
                            print(f"   ‚ùå {desc} - Status: {response.status_code}")
                    else:
                        if response.status_code in [302, 403, 401]:
                            print(f"   ‚úÖ {desc}")
                        else:
                            print(f"   ‚ùå {desc} - Acc√®s autoris√© (erreur)")
                
    except Exception as e:
        print(f"   ‚ùå Erreur test permissions: {e}")

if __name__ == "__main__":
    print("üöÄ TESTS COMPLETS DE LA PAGE PARAM√àTRES")
    print("=" * 50)
    
    # Tests
    test_fichiers_statiques()
    test_structure_template()
    test_parametres_page()
    test_permissions()
    
    print("\n" + "=" * 50)
    print("üéâ Tests termin√©s!")
    
    print(f"\nüìã R√âSUM√â:")
    print(f"   ‚Ä¢ Page param√®tres cr√©√©e avec 4 sections")
    print(f"   ‚Ä¢ Permissions par r√¥le impl√©ment√©es")
    print(f"   ‚Ä¢ APIs d'audit et gestion utilisateurs")
    print(f"   ‚Ä¢ Interface moderne avec CSS/JS s√©par√©s")
    print(f"   ‚Ä¢ Modals pour cr√©ation/modification")
    print(f"   ‚Ä¢ Syst√®me de d√©connexion int√©gr√©")
