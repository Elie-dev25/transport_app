#!/usr/bin/env python3
"""
Script pour corriger les probl√®mes de d√©pendances Flask
R√©sout l'erreur ModuleNotFoundError: No module named 'flask.debughelpers'
"""

import subprocess
import sys
import os

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\nüîß {description}...")
    print(f"Commande: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout:
                print(f"Output: {result.stdout.strip()}")
        else:
            print(f"‚ùå {description} - Erreur")
            if result.stderr:
                print(f"Erreur: {result.stderr.strip()}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        return False
    
    return True

def fix_flask_dependencies():
    """Corrige les d√©pendances Flask incompatibles"""
    
    print("üöÄ CORRECTION DES D√âPENDANCES FLASK")
    print("=" * 60)
    
    # V√©rifier si on est dans un environnement virtuel
    if not os.environ.get('VIRTUAL_ENV'):
        print("‚ö†Ô∏è  ATTENTION: Vous n'√™tes pas dans un environnement virtuel")
        print("   Il est recommand√© d'utiliser un environnement virtuel")
        print("üöÄ Continuation automatique pour correction...")
    else:
        print("‚úÖ Environnement virtuel d√©tect√©")
    
    # √âtape 1: D√©sinstaller les packages probl√©matiques
    packages_to_remove = [
        'Flask',
        'Flask-WTF', 
        'Flask-SQLAlchemy',
        'Flask-Login',
        'Werkzeug',
        'WTForms',
        'SQLAlchemy'
    ]
    
    print(f"\nüì¶ D√©sinstallation des packages probl√©matiques...")
    for package in packages_to_remove:
        command = f"pip uninstall {package} -y"
        run_command(command, f"D√©sinstallation de {package}")
    
    # √âtape 2: Nettoyer le cache pip
    if not run_command("pip cache purge", "Nettoyage du cache pip"):
        print("‚ö†Ô∏è  Impossible de nettoyer le cache pip (normal sur certains syst√®mes)")
    
    # √âtape 3: Mettre √† jour pip
    run_command("python -m pip install --upgrade pip", "Mise √† jour de pip")
    
    # √âtape 4: Installer les versions compatibles
    print(f"\nüì¶ Installation des versions compatibles...")
    
    compatible_packages = [
        "Werkzeug==2.3.7",
        "Flask==2.3.3", 
        "WTForms==3.0.1",
        "Flask-WTF==1.1.1",
        "SQLAlchemy==2.0.23",
        "Flask-SQLAlchemy==3.0.5",
        "Flask-Login==0.6.3"
    ]
    
    for package in compatible_packages:
        if not run_command(f"pip install {package}", f"Installation de {package}"):
            print(f"‚ùå √âchec de l'installation de {package}")
            return False
    
    # √âtape 5: Installer le reste des d√©pendances
    print(f"\nüì¶ Installation des autres d√©pendances...")
    if not run_command("pip install -r requirements.txt", "Installation depuis requirements.txt"):
        print("‚ö†Ô∏è  Certaines d√©pendances ont pu √©chouer, mais les principales sont install√©es")
    
    # √âtape 6: V√©rifier l'installation
    print(f"\nüîç V√©rification de l'installation...")
    
    verification_commands = [
        ("python -c \"import flask; print(f'Flask: {flask.__version__}')\"", "Version Flask"),
        ("python -c \"import flask_wtf; print(f'Flask-WTF: {flask_wtf.__version__}')\"", "Version Flask-WTF"),
        ("python -c \"import werkzeug; print(f'Werkzeug: {werkzeug.__version__}')\"", "Version Werkzeug"),
        ("python -c \"from flask import Flask; app = Flask(__name__); print('‚úÖ Flask fonctionne')\"", "Test Flask"),
        ("python -c \"from flask_wtf import FlaskForm; print('‚úÖ Flask-WTF fonctionne')\"", "Test Flask-WTF")
    ]
    
    all_good = True
    for command, description in verification_commands:
        if not run_command(command, description):
            all_good = False
    
    if all_good:
        print(f"\nüéâ CORRECTION TERMIN√âE AVEC SUCC√àS!")
        print("‚úÖ Toutes les d√©pendances sont maintenant compatibles")
        print("‚úÖ Vous pouvez maintenant d√©marrer votre application Flask")
        print("\nüí° Pour tester:")
        print("   python run.py")
        return True
    else:
        print(f"\n‚ö†Ô∏è  CORRECTION PARTIELLEMENT R√âUSSIE")
        print("Certaines v√©rifications ont √©chou√©, mais l'application devrait fonctionner")
        return False

def test_flask_app():
    """Test rapide de l'application Flask"""
    print(f"\nüß™ TEST RAPIDE DE L'APPLICATION")
    print("=" * 60)
    
    test_code = '''
try:
    from app import create_app
    app = create_app()
    print("‚úÖ Application Flask cr√©√©e avec succ√®s")
    
    with app.app_context():
        print("‚úÖ Contexte d'application fonctionne")
        
        # Test des formulaires
        from app.forms.login_form import LoginForm
        form = LoginForm()
        print("‚úÖ Formulaires Flask-WTF fonctionnent")
        
    print("üéâ TOUS LES TESTS PASSENT!")
    
except Exception as e:
    print(f"‚ùå Erreur lors du test: {e}")
    import traceback
    traceback.print_exc()
'''
    
    if not run_command(f'python -c "{test_code}"', "Test de l'application"):
        print("‚ùå L'application a encore des probl√®mes")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("üîß CORRECTEUR DE D√âPENDANCES FLASK - TransportUdM")
    print("=" * 80)
    
    # Corriger les d√©pendances
    if fix_flask_dependencies():
        # Tester l'application
        if test_flask_app():
            print(f"\nüéâ SUCC√àS COMPLET!")
            print("Votre application TransportUdM est pr√™te √† fonctionner")
        else:
            print(f"\n‚ö†Ô∏è  Les d√©pendances sont corrig√©es mais il reste des probl√®mes")
    else:
        print(f"\n‚ùå √âCHEC DE LA CORRECTION")
        print("Veuillez v√©rifier les erreurs ci-dessus")
    
    print(f"\nüìù NOTES:")
    print("‚Ä¢ Si vous utilisez Docker, reconstruisez l'image apr√®s cette correction")
    print("‚Ä¢ En cas de probl√®me persistant, supprimez venv/ et recr√©ez l'environnement")
    print("‚Ä¢ Les versions install√©es sont test√©es et compatibles")

if __name__ == "__main__":
    main()
