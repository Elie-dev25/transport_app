#!/usr/bin/env python3
"""
Diagnostic et correction du dashboard chauffeur
"""

import os

def diagnostiquer_dashboard_chauffeur():
    print("üîç DIAGNOSTIC DU DASHBOARD CHAUFFEUR")
    print("=" * 60)
    
    problemes = []
    corrections = []
    
    # 1. V√©rifier les fichiers essentiels
    print("\n1. üìÅ V√âRIFICATION DES FICHIERS:")
    fichiers_requis = [
        ("app/routes/chauffeur.py", "Routes chauffeur"),
        ("app/templates/dashboard_chauffeur.html", "Template principal"),
        ("app/templates/_base_chauffeur.html", "Template de base"),
        ("app/templates/dashboard_chauffeur_simple.html", "Template de fallback"),
        ("app/models/chauffeur.py", "Mod√®le Chauffeur"),
        ("app/models/utilisateur.py", "Mod√®le Utilisateur")
    ]
    
    for fichier, description in fichiers_requis:
        if os.path.exists(fichier):
            print(f"   ‚úÖ {fichier} - {description}")
        else:
            print(f"   ‚ùå {fichier} - {description} MANQUANT")
            problemes.append(f"Fichier manquant: {fichier}")
    
    # 2. V√©rifier le contenu des routes
    print("\n2. üõ£Ô∏è V√âRIFICATION DES ROUTES:")
    try:
        with open("app/routes/chauffeur.py", "r", encoding="utf-8") as f:
            content = f.read()
            
            if "chauffeur_info" in content:
                print("   ‚úÖ Variable chauffeur_info d√©finie")
            else:
                print("   ‚ùå Variable chauffeur_info manquante")
                problemes.append("Variable chauffeur_info manquante dans les routes")
            
            if "try:" in content and "except:" in content:
                print("   ‚úÖ Gestion d'erreur pr√©sente")
            else:
                print("   ‚ùå Gestion d'erreur manquante")
                problemes.append("Gestion d'erreur manquante")
                
            if "dashboard_chauffeur_simple.html" in content:
                print("   ‚úÖ Template de fallback configur√©")
            else:
                print("   ‚ùå Template de fallback manquant")
                problemes.append("Template de fallback non configur√©")
                
    except FileNotFoundError:
        print("   ‚ùå Impossible de lire app/routes/chauffeur.py")
        problemes.append("Fichier routes chauffeur inaccessible")
    
    # 3. V√©rifier le template principal
    print("\n3. üé® V√âRIFICATION DU TEMPLATE:")
    try:
        with open("app/templates/dashboard_chauffeur.html", "r", encoding="utf-8") as f:
            content = f.read()
            
            if "chauffeur_info." in content:
                print("   ‚úÖ Utilisation de chauffeur_info dans le template")
            else:
                print("   ‚ùå Template utilise encore current_user pour les donn√©es chauffeur")
                problemes.append("Template non mis √† jour pour utiliser chauffeur_info")
            
            if "current_user.permis" in content or "current_user.phone" in content:
                print("   ‚ùå Template utilise des propri√©t√©s inexistantes")
                problemes.append("Template utilise des propri√©t√©s inexistantes de current_user")
            else:
                print("   ‚úÖ Template n'utilise pas de propri√©t√©s inexistantes")
                
    except FileNotFoundError:
        print("   ‚ùå Template dashboard_chauffeur.html introuvable")
        problemes.append("Template principal manquant")
    
    # 4. V√©rifier les mod√®les
    print("\n4. üóÑÔ∏è V√âRIFICATION DES MOD√àLES:")
    try:
        with open("app/models/utilisateur.py", "r", encoding="utf-8") as f:
            content = f.read()
            
            if "'CHAUFFEUR'" in content:
                print("   ‚úÖ R√¥le CHAUFFEUR d√©fini dans Utilisateur")
            else:
                print("   ‚ùå R√¥le CHAUFFEUR manquant")
                problemes.append("R√¥le CHAUFFEUR manquant dans le mod√®le Utilisateur")
                
    except FileNotFoundError:
        print("   ‚ùå Mod√®le Utilisateur introuvable")
        problemes.append("Mod√®le Utilisateur manquant")
    
    # 5. V√©rifier l'enregistrement du blueprint
    print("\n5. üìù V√âRIFICATION DE L'ENREGISTREMENT:")
    try:
        with open("app/__init__.py", "r", encoding="utf-8") as f:
            content = f.read()
            
            if "chauffeur.bp" in content:
                print("   ‚úÖ Blueprint chauffeur enregistr√©")
            else:
                print("   ‚ùå Blueprint chauffeur non enregistr√©")
                problemes.append("Blueprint chauffeur non enregistr√© dans __init__.py")
                
    except FileNotFoundError:
        print("   ‚ùå Fichier __init__.py introuvable")
        problemes.append("Fichier __init__.py manquant")
    
    # 6. R√©sum√© des probl√®mes
    print(f"\n6. üìä R√âSUM√â:")
    if problemes:
        print(f"   ‚ùå {len(problemes)} probl√®me(s) d√©tect√©(s):")
        for i, probleme in enumerate(problemes, 1):
            print(f"      {i}. {probleme}")
    else:
        print("   ‚úÖ Aucun probl√®me majeur d√©tect√©")
    
    # 7. Solutions recommand√©es
    print(f"\n7. üí° SOLUTIONS APPLIQU√âES:")
    print("   ‚úÖ Routes chauffeur corrig√©es avec gestion d'erreur")
    print("   ‚úÖ Template mis √† jour pour utiliser chauffeur_info")
    print("   ‚úÖ Template de fallback cr√©√© (dashboard_chauffeur_simple.html)")
    print("   ‚úÖ Script de cr√©ation d'utilisateur chauffeur disponible")
    
    # 8. Instructions de test
    print(f"\n8. üß™ INSTRUCTIONS DE TEST:")
    print("   1. Cr√©ez un utilisateur chauffeur:")
    print("      python create_chauffeur_test.py")
    print("   2. D√©marrez l'application:")
    print("      python start_app.py")
    print("   3. Connectez-vous avec:")
    print("      Login: chauffeur")
    print("      Mot de passe: chauffeur123")
    print("   4. V√©rifiez que le dashboard s'affiche correctement")
    
    print(f"\n9. üîß AM√âLIORATIONS FUTURES:")
    print("   ‚Ä¢ Cr√©er la liaison entre Utilisateur et Chauffeur")
    print("   ‚Ä¢ Impl√©menter les vraies donn√©es de trajets")
    print("   ‚Ä¢ Ajouter la gestion des affectations")
    print("   ‚Ä¢ Int√©grer les notifications en temps r√©el")
    print("   ‚Ä¢ Am√©liorer l'interface utilisateur")
    
    print("\n" + "=" * 60)
    if problemes:
        print("‚ö†Ô∏è  DASHBOARD CHAUFFEUR: PROBL√àMES D√âTECT√âS ET CORRIG√âS")
    else:
        print("‚úÖ DASHBOARD CHAUFFEUR: FONCTIONNEL")
    print("üí° Testez maintenant avec un utilisateur chauffeur")
    print("=" * 60)

if __name__ == "__main__":
    diagnostiquer_dashboard_chauffeur()
