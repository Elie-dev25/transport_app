#!/usr/bin/env python3
"""
Script de test pour v√©rifier la nouvelle architecture unifi√©e
Teste que les formulaires et modales sont correctement partag√©s entre les r√¥les
"""

import os
import sys
import subprocess
from pathlib import Path

def test_imports():
    """Teste que tous les imports fonctionnent correctement"""
    print("üîç Test des imports...")
    
    try:
        # Test des nouveaux formulaires
        from app.forms.trajet_interne_bus_udm_form import TrajetInterneBusUdMForm
        from app.forms.trajet_prestataire_form import TrajetPrestataireForm
        from app.forms.autres_trajets_form import AutresTrajetsForm
        print("‚úÖ Formulaires modernis√©s import√©s avec succ√®s")
        
        # Test du service centralis√©
        from app.services.form_service import FormService
        print("‚úÖ Service FormService import√© avec succ√®s")
        
        # Test des services de trajets
        from app.services.trajet_service import (
            enregistrer_trajet_interne_bus_udm,
            enregistrer_trajet_prestataire_modernise,
            enregistrer_autres_trajets
        )
        print("‚úÖ Services de trajets modernis√©s import√©s avec succ√®s")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_templates_exist():
    """V√©rifie que les nouveaux templates partag√©s existent"""
    print("\nüîç Test de l'existence des templates...")
    
    templates_to_check = [
        "app/templates/shared/modals/trajet_interne_modal.html",
        "app/templates/shared/modals/trajet_prestataire_modal.html", 
        "app/templates/shared/modals/autres_trajets_modal.html",
        "app/templates/shared/macros/trajet_modals.html"
    ]
    
    all_exist = True
    for template in templates_to_check:
        if os.path.exists(template):
            print(f"‚úÖ {template}")
        else:
            print(f"‚ùå {template} - MANQUANT")
            all_exist = False
    
    return all_exist

def test_routes_syntax():
    """Teste la syntaxe des routes modifi√©es"""
    print("\nüîç Test de la syntaxe des routes...")
    
    try:
        # Test de la syntaxe Python des routes
        result = subprocess.run([
            sys.executable, "-m", "py_compile", 
            "app/routes/charge_transport.py"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Route charge_transport.py - syntaxe OK")
        else:
            print(f"‚ùå Route charge_transport.py - erreur de syntaxe: {result.stderr}")
            return False
            
        # Test de la route admin
        result = subprocess.run([
            sys.executable, "-m", "py_compile", 
            "app/routes/admin/dashboard.py"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Route admin/dashboard.py - syntaxe OK")
        else:
            print(f"‚ùå Route admin/dashboard.py - erreur de syntaxe: {result.stderr}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de syntaxe: {e}")
        return False

def test_form_service():
    """Teste le service FormService"""
    print("\nüîç Test du service FormService...")
    
    try:
        from app.forms.trajet_interne_bus_udm_form import TrajetInterneBusUdMForm
        from app.services.form_service import FormService
        
        # Cr√©er un formulaire de test
        form = TrajetInterneBusUdMForm()
        
        # Tester les m√©thodes du service
        bus_choices = FormService.get_bus_choices()
        chauffeur_choices = FormService.get_chauffeur_choices()
        prestataire_choices = FormService.get_prestataire_choices()
        
        print("‚úÖ FormService.get_bus_choices() fonctionne")
        print("‚úÖ FormService.get_chauffeur_choices() fonctionne")
        print("‚úÖ FormService.get_prestataire_choices() fonctionne")
        
        # Tester le peuplement des formulaires
        FormService.populate_trajet_form_choices(form)
        print("‚úÖ FormService.populate_trajet_form_choices() fonctionne")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans FormService: {e}")
        return False

def test_template_syntax():
    """Teste la syntaxe des templates modifi√©s"""
    print("\nüîç Test de la syntaxe des templates...")
    
    templates_to_check = [
        "app/templates/dashboard_charge.html",
        "app/templates/dashboard_admin.html"
    ]
    
    all_ok = True
    for template in templates_to_check:
        if os.path.exists(template):
            # V√©rification basique de la syntaxe Jinja2
            with open(template, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # V√©rifications basiques
            if '{% from' in content and 'import' in content:
                print(f"‚úÖ {template} - contient des imports de macros")
            else:
                print(f"‚ö†Ô∏è  {template} - pas d'imports de macros d√©tect√©s")
                
            if 'include_all_trajet_modals' in content:
                print(f"‚úÖ {template} - utilise les nouvelles macros")
            else:
                print(f"‚ö†Ô∏è  {template} - n'utilise pas les nouvelles macros")
        else:
            print(f"‚ùå {template} - MANQUANT")
            all_ok = False
    
    return all_ok

def main():
    """Fonction principale de test"""
    print("üöÄ Test de la nouvelle architecture unifi√©e")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Templates", test_templates_exist),
        ("Syntaxe des routes", test_routes_syntax),
        ("Service FormService", test_form_service),
        ("Syntaxe des templates", test_template_syntax)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat global: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! L'architecture unifi√©e est pr√™te.")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
