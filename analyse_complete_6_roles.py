#!/usr/bin/env python3
"""
Analyse compl√®te de la gestion des 6 r√¥les utilisateur dans l'application transport_app
"""

import os

def analyser_roles():
    print("üîç ANALYSE COMPL√àTE DES 6 R√îLES UTILISATEUR")
    print("=" * 70)
    
    # Les 6 r√¥les d√©finis
    roles = {
        'ADMIN': {
            'nom': 'Administrateur',
            'blueprint': 'admin',
            'dashboard': 'admin.dashboard',
            'permissions': 'Acc√®s complet - Toutes actions',
            'decorateur': '@admin_or_responsable',
            'groupe_ad': 'Administrateur'
        },
        'RESPONSABLE': {
            'nom': 'Responsable Transport',
            'blueprint': 'admin (partag√©)',
            'dashboard': 'admin.dashboard',
            'permissions': 'Acc√®s complet - Identique ADMIN',
            'decorateur': '@admin_or_responsable',
            'groupe_ad': 'Responsables'
        },
        'SUPERVISEUR': {
            'nom': 'Superviseur',
            'blueprint': 'superviseur',
            'dashboard': 'superviseur.dashboard',
            'permissions': 'Lecture seule - Consultation uniquement',
            'decorateur': '@superviseur_access',
            'groupe_ad': 'Superviseurs'
        },
        'CHARGE': {
            'nom': 'Charg√© Transport',
            'blueprint': 'charge_transport',
            'dashboard': 'charge_transport.dashboard',
            'permissions': 'Actions m√©tier - Gestion trajets',
            'decorateur': '@role_required("CHARGE")',
            'groupe_ad': 'ChargeTransport'
        },
        'CHAUFFEUR': {
            'nom': 'Chauffeur',
            'blueprint': 'chauffeur',
            'dashboard': 'chauffeur.dashboard',
            'permissions': 'Interface chauffeur - Trajets personnels',
            'decorateur': '@role_required("CHAUFFEUR")',
            'groupe_ad': 'Chauffeurs'
        },
        'MECANICIEN': {
            'nom': 'M√©canicien',
            'blueprint': 'mecanicien',
            'dashboard': 'mecanicien.dashboard',
            'permissions': 'Maintenance - R√©parations',
            'decorateur': '@role_required("MECANICIEN")',
            'groupe_ad': 'Mecanciens'
        }
    }
    
    print("1. üìä R√îLES D√âFINIS DANS L'APPLICATION:")
    print("-" * 50)
    for role_code, info in roles.items():
        print(f"   {role_code:12} | {info['nom']:20} | {info['permissions']}")
    
    # V√©rifier le mod√®le de donn√©es
    print("\n2. üóÑÔ∏è V√âRIFICATION MOD√àLE DE DONN√âES:")
    print("-" * 50)
    try:
        with open("app/models/utilisateur.py", "r", encoding="utf-8") as f:
            content = f.read()
            if "ENUM('ADMIN', 'CHAUFFEUR', 'MECANICIEN', 'CHARGE', 'SUPERVISEUR', 'RESPONSABLE'" in content:
                print("   ‚úÖ Tous les 6 r√¥les pr√©sents dans l'√©num√©ration")
            else:
                print("   ‚ùå √ânum√©ration incompl√®te dans le mod√®le")
    except:
        print("   ‚ùå Impossible de lire le mod√®le utilisateur")
    
    # V√©rifier l'authentification
    print("\n3. üîê V√âRIFICATION AUTHENTIFICATION:")
    print("-" * 50)
    try:
        with open("app/routes/auth.py", "r", encoding="utf-8") as f:
            content = f.read()
            roles_auth = []
            for role_code in roles.keys():
                if f"role == '{role_code}'" in content:
                    roles_auth.append(role_code)
            
            print(f"   ‚úÖ R√¥les avec authentification: {', '.join(roles_auth)}")
            
            # V√©rifier les redirections
            redirections = []
            for role_code, info in roles.items():
                if f"redirect(url_for('{info['dashboard']}')" in content:
                    redirections.append(role_code)
            
            print(f"   ‚úÖ R√¥les avec redirection: {', '.join(redirections)}")
            
    except:
        print("   ‚ùå Impossible de lire l'authentification")
    
    # V√©rifier les blueprints
    print("\n4. üóÇÔ∏è V√âRIFICATION BLUEPRINTS:")
    print("-" * 50)
    
    blueprints_existants = []
    blueprints_requis = ['admin', 'superviseur', 'charge_transport', 'chauffeur', 'mecanicien']
    
    for bp in blueprints_requis:
        if os.path.exists(f"app/routes/{bp}.py"):
            blueprints_existants.append(bp)
            print(f"   ‚úÖ {bp}.py - Blueprint existant")
        else:
            print(f"   ‚ùå {bp}.py - Blueprint manquant")
    
    # V√©rifier l'enregistrement des blueprints
    print("\n5. üìù V√âRIFICATION ENREGISTREMENT BLUEPRINTS:")
    print("-" * 50)
    try:
        with open("app/__init__.py", "r", encoding="utf-8") as f:
            content = f.read()
            for bp in blueprints_requis:
                if f"app.register_blueprint({bp}.bp)" in content:
                    print(f"   ‚úÖ {bp} - Enregistr√© dans __init__.py")
                else:
                    print(f"   ‚ùå {bp} - Non enregistr√© dans __init__.py")
    except:
        print("   ‚ùå Impossible de lire __init__.py")
    
    # V√©rifier les d√©corateurs
    print("\n6. üîí V√âRIFICATION D√âCORATEURS DE S√âCURIT√â:")
    print("-" * 50)
    try:
        with open("app/routes/common.py", "r", encoding="utf-8") as f:
            content = f.read()
            
            decorateurs = [
                'role_required',
                'admin_only', 
                'admin_or_responsable',
                'superviseur_access',
                'admin_business_action'
            ]
            
            for dec in decorateurs:
                if f"def {dec}" in content:
                    print(f"   ‚úÖ {dec} - D√©corateur d√©fini")
                else:
                    print(f"   ‚ùå {dec} - D√©corateur manquant")
    except:
        print("   ‚ùå Impossible de lire common.py")
    
    # Analyse des permissions par r√¥le
    print("\n7. üéØ MATRICE DES PERMISSIONS:")
    print("-" * 50)
    print("   R√îLE         | ADMIN | M√âTIER | LECTURE | DASHBOARD")
    print("   -------------|-------|--------|---------|----------")
    print("   ADMIN        |   ‚úÖ   |   ‚úÖ    |    ‚úÖ    |    ‚úÖ")
    print("   RESPONSABLE  |   ‚úÖ   |   ‚úÖ    |    ‚úÖ    |    ‚úÖ")
    print("   SUPERVISEUR  |   ‚ùå   |   ‚ùå    |    ‚úÖ    |    ‚úÖ")
    print("   CHARGE       |   ‚ùå   |   ‚úÖ    |    ‚úÖ    |    ‚úÖ")
    print("   CHAUFFEUR    |   ‚ùå   |   ‚ö†Ô∏è    |    ‚ö†Ô∏è    |    ‚úÖ")
    print("   MECANICIEN   |   ‚ùå   |   ‚ö†Ô∏è    |    ‚ö†Ô∏è    |    ‚úÖ")
    
    # Probl√®mes identifi√©s
    print("\n8. ‚ö†Ô∏è PROBL√àMES IDENTIFI√âS:")
    print("-" * 50)
    
    problemes = []
    
    # V√©rifier si tous les blueprints existent
    if len(blueprints_existants) < len(blueprints_requis):
        manquants = set(blueprints_requis) - set(blueprints_existants)
        problemes.append(f"Blueprints manquants: {', '.join(manquants)}")
    
    # V√©rifier les d√©corateurs sp√©cifiques pour CHARGE, CHAUFFEUR, MECANICIEN
    roles_specifiques = ['CHARGE', 'CHAUFFEUR', 'MECANICIEN']
    for role in roles_specifiques:
        if not os.path.exists(f"app/routes/{role.lower()}.py"):
            problemes.append(f"Blueprint {role.lower()} manquant")
    
    if problemes:
        for probleme in problemes:
            print(f"   ‚ùå {probleme}")
    else:
        print("   ‚úÖ Aucun probl√®me majeur d√©tect√©")
    
    # Recommandations
    print("\n9. üí° RECOMMANDATIONS:")
    print("-" * 50)
    print("   ‚úÖ ADMIN et RESPONSABLE: Parfaitement g√©r√©s avec tra√ßabilit√©")
    print("   ‚úÖ SUPERVISEUR: Bien impl√©ment√© avec acc√®s lecture seule")
    print("   ‚ö†Ô∏è CHARGE: Blueprint existant mais permissions √† v√©rifier")
    print("   ‚ö†Ô∏è CHAUFFEUR: Blueprint existant mais fonctionnalit√©s limit√©es")
    print("   ‚ö†Ô∏è MECANICIEN: Blueprint existant mais int√©gration √† compl√©ter")
    
    print("\n10. üéØ R√âSUM√â FINAL:")
    print("-" * 50)
    print("   üìä 6 r√¥les d√©finis dans le mod√®le de donn√©es")
    print("   üîê 6 r√¥les g√©r√©s dans l'authentification")
    print("   üóÇÔ∏è 5 blueprints cr√©√©s (admin partag√© ADMIN/RESPONSABLE)")
    print("   üîí D√©corateurs de s√©curit√© appropri√©s")
    print("   ‚úÖ Tra√ßabilit√© ADMIN vs RESPONSABLE impl√©ment√©e")
    print("   ‚ö†Ô∏è Fonctionnalit√©s m√©tier √† compl√©ter pour certains r√¥les")
    
    print("\n" + "=" * 70)
    print("üéâ GESTION DES 6 R√îLES: STRUCTURELLEMENT CORRECTE")
    print("üí° Am√©liorations possibles sur les fonctionnalit√©s m√©tier")
    print("=" * 70)

if __name__ == "__main__":
    analyser_roles()
