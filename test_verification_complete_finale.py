#!/usr/bin/env python3
"""
Test de v√©rification compl√®te finale apr√®s toutes les corrections
V√©rifie que tous les mod√®les, formulaires, services et templates sont coh√©rents
"""

import sys
import os

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_modeles_db_compatibility():
    """Test de compatibilit√© des mod√®les avec la DB"""
    print("üîç TEST COMPATIBILIT√â MOD√àLES-DB")
    print("=" * 50)
    
    try:
        from app import create_app
        from app.models.bus_udm import BusUdM
        from app.models.chauffeur import Chauffeur
        from app.models.mecanicien import Mecanicien
        from app.models.prestataire import Prestataire
        from app.models.trajet import Trajet
        from app.models.carburation import Carburation
        from app.models.vidange import Vidange
        from app.models.panne_bus_udm import PanneBusUdM
        from app.models.depannage import Depannage
        from app.models.document_bus_udm import DocumentBusUdM
        from app.models.fuel_alert_state import FuelAlertState
        from app.models.affectation import Affectation
        from app.models.chauffeur_statut import ChauffeurStatut
        from app.models.demande_huile import DemandeHuile
        
        app = create_app()
        
        with app.app_context():
            # Test de connexion √† la DB
            print("‚úÖ Tous les mod√®les import√©s sans erreur")
            
            # Test de requ√™te simple sur chaque mod√®le
            modeles_a_tester = [
                (BusUdM, "Bus UdM"),
                (Chauffeur, "Chauffeur"),
                (Mecanicien, "M√©canicien"),
                (Prestataire, "Prestataire"),
                (Trajet, "Trajet"),
                (Carburation, "Carburation"),
                (Vidange, "Vidange"),
                (PanneBusUdM, "Panne Bus UdM"),
                (Depannage, "D√©pannage"),
                (DocumentBusUdM, "Document Bus UdM"),
                (FuelAlertState, "Fuel Alert State"),
                (Affectation, "Affectation"),
                (ChauffeurStatut, "Chauffeur Statut"),
                (DemandeHuile, "Demande Huile")
            ]
            
            for modele, nom in modeles_a_tester:
                try:
                    count = modele.query.count()
                    print(f"‚úÖ {nom}: {count} enregistrements")
                except Exception as e:
                    print(f"‚ùå {nom}: Erreur - {str(e)}")
                    return False
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test des mod√®les: {str(e)}")
        return False

def test_formulaires_coherence():
    """Test de coh√©rence des formulaires"""
    print("\nüîç TEST COH√âRENCE FORMULAIRES")
    print("=" * 50)
    
    try:
        from app.forms.trajet_interne_bus_udm_form import TrajetInterneBusUdMForm
        from app.forms.trajet_prestataire_form import TrajetPrestataireForm
        from app.forms.autres_trajets_form import AutresTrajetsForm
        from app.forms.trajet_banekane_retour_form import TrajetBanekaneRetourForm
        from app.forms.trajet_depart_form import TrajetDepartForm
        from app.forms.bus_udm_form import BusUdMForm
        from app.forms.panne_form import PanneForm
        
        # V√©rifier que tous les formulaires ont les bons champs
        formulaires_a_tester = [
            (TrajetInterneBusUdMForm, "Trajet Interne Bus UdM", ["numero_bus_udm", "point_arriver"]),
            (TrajetPrestataireForm, "Trajet Prestataire", ["point_arriver", "nom_prestataire"]),
            (AutresTrajetsForm, "Autres Trajets", ["numero_bus_udm", "point_arriver"]),
            (TrajetBanekaneRetourForm, "Trajet Banekane Retour", ["numero_bus_udm", "point_arriver"]),
            (TrajetDepartForm, "Trajet D√©part", ["numero_bus_udm"]),
            (BusUdMForm, "Bus UdM", ["numero", "immatriculation"]),
            (PanneForm, "Panne", ["numero_bus_udm"])
        ]
        
        for form_class, nom, champs_requis in formulaires_a_tester:
            try:
                form = form_class()
                champs_manquants = []
                
                for champ in champs_requis:
                    if not hasattr(form, champ):
                        champs_manquants.append(champ)
                
                if champs_manquants:
                    print(f"‚ùå {nom}: Champs manquants - {champs_manquants}")
                    return False
                else:
                    print(f"‚úÖ {nom}: Tous les champs requis pr√©sents")
                    
            except Exception as e:
                print(f"‚ùå {nom}: Erreur - {str(e)}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des formulaires: {str(e)}")
        return False

def test_services_fonctionnels():
    """Test des services"""
    print("\nüîç TEST SERVICES FONCTIONNELS")
    print("=" * 50)
    
    try:
        from app import create_app
        from app.services.dashboard_service import DashboardService
        from app.services.query_service import QueryService
        from app.services.form_service import FormService
        from app.services.bus_service import BusService
        
        app = create_app()
        
        with app.app_context():
            # Test DashboardService
            try:
                stats = DashboardService.get_dashboard_stats()
                print(f"‚úÖ DashboardService: {len(stats)} statistiques")
            except Exception as e:
                print(f"‚ùå DashboardService: {str(e)}")
                return False
            
            # Test QueryService
            try:
                chauffeurs = QueryService.get_chauffeur_choices()
                prestataires = QueryService.get_prestataire_choices()
                print(f"‚úÖ QueryService: {len(chauffeurs)} chauffeurs, {len(prestataires)} prestataires")
            except Exception as e:
                print(f"‚ùå QueryService: {str(e)}")
                return False
            
            # Test FormService
            try:
                from app.forms.trajet_interne_bus_udm_form import TrajetInterneBusUdMForm
                form = TrajetInterneBusUdMForm()
                FormService.populate_trajet_form_choices(form)
                print(f"‚úÖ FormService: Formulaire peupl√© avec {len(form.numero_bus_udm.choices)} bus")
            except Exception as e:
                print(f"‚ùå FormService: {str(e)}")
                return False
            
            # Test BusService
            try:
                buses = BusService.get_all_buses()
                print(f"‚úÖ BusService: {len(buses)} bus r√©cup√©r√©s")
            except Exception as e:
                print(f"‚ùå BusService: {str(e)}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des services: {str(e)}")
        return False

def test_application_startup():
    """Test de d√©marrage de l'application"""
    print("\nüîç TEST D√âMARRAGE APPLICATION")
    print("=" * 50)
    
    try:
        from app import create_app
        
        app = create_app()
        
        with app.app_context():
            # Test de cr√©ation du contexte
            print("‚úÖ Contexte d'application cr√©√©")
            
            # Test de configuration
            if app.config.get('SQLALCHEMY_DATABASE_URI'):
                print("‚úÖ Configuration de base de donn√©es pr√©sente")
            else:
                print("‚ùå Configuration de base de donn√©es manquante")
                return False
            
            # Test d'import des blueprints
            blueprint_names = [bp.name for bp in app.blueprints.values()]
            print(f"‚úÖ Blueprints enregistr√©s: {', '.join(blueprint_names)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de d√©marrage: {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ V√âRIFICATION COMPL√àTE FINALE")
    print("=" * 80)
    
    tests = [
        ("Mod√®les-DB Compatibility", test_modeles_db_compatibility),
        ("Coh√©rence Formulaires", test_formulaires_coherence),
        ("Services Fonctionnels", test_services_fonctionnels),
        ("D√©marrage Application", test_application_startup)
    ]
    
    resultats = []
    
    for nom_test, fonction_test in tests:
        try:
            resultat = fonction_test()
            resultats.append((nom_test, resultat))
        except Exception as e:
            print(f"‚ùå Erreur critique dans {nom_test}: {str(e)}")
            resultats.append((nom_test, False))
    
    # R√©sum√© final
    print("\n" + "=" * 80)
    print("üìä R√âSUM√â FINAL")
    print("=" * 80)
    
    tests_reussis = 0
    for nom_test, resultat in resultats:
        status = "‚úÖ R√âUSSI" if resultat else "‚ùå √âCHEC"
        print(f"{status} - {nom_test}")
        if resultat:
            tests_reussis += 1
    
    print(f"\nüéØ R√âSULTAT GLOBAL: {tests_reussis}/{len(tests)} tests r√©ussis")
    
    if tests_reussis == len(tests):
        print("üéâ TOUTES LES V√âRIFICATIONS SONT R√âUSSIES !")
        print("‚úÖ L'application est enti√®rement fonctionnelle et coh√©rente")
        return True
    else:
        print("‚ö†Ô∏è  Des probl√®mes subsistent et n√©cessitent une correction")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
