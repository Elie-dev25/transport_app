#!/usr/bin/env python3
"""
Script de test pour le r√¥le SUPERVISEUR
V√©rifie que le nouveau r√¥le fonctionne correctement
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from app.models.utilisateur import Utilisateur
from app.database import db
from werkzeug.security import generate_password_hash

def test_superviseur_role():
    """Test complet du r√¥le SUPERVISEUR"""
    
    app = create_app()
    
    with app.app_context():
        print("üîç Test du r√¥le SUPERVISEUR")
        print("=" * 50)
        
        try:
            # Test 1: V√©rifier que l'√©num√©ration accepte SUPERVISEUR
            print("\n1. Test de l'√©num√©ration des r√¥les...")
            
            # Cr√©er un utilisateur superviseur de test
            test_user = Utilisateur(
                nom="Test",
                prenom="Superviseur",
                login="test.superviseur",
                role="SUPERVISEUR",
                email="test.superviseur@udm.local",
                telephone="123456789"
            )
            test_user.set_password("password123")
            
            # Tenter d'ajouter √† la base
            db.session.add(test_user)
            db.session.commit()
            print("   ‚úÖ Utilisateur SUPERVISEUR cr√©√© avec succ√®s")
            
            # Test 2: V√©rifier la r√©cup√©ration
            print("\n2. Test de r√©cup√©ration de l'utilisateur...")
            retrieved_user = Utilisateur.query.filter_by(login="test.superviseur").first()
            
            if retrieved_user and retrieved_user.role == "SUPERVISEUR":
                print("   ‚úÖ Utilisateur SUPERVISEUR r√©cup√©r√© correctement")
                print(f"   üìã D√©tails: {retrieved_user.nom} {retrieved_user.prenom} - {retrieved_user.role}")
            else:
                print("   ‚ùå Erreur lors de la r√©cup√©ration")
                return False
            
            # Test 3: V√©rifier l'authentification
            print("\n3. Test d'authentification...")
            if retrieved_user.check_password("password123"):
                print("   ‚úÖ Authentification r√©ussie")
            else:
                print("   ‚ùå √âchec de l'authentification")
                return False
            
            # Test 4: Compter les utilisateurs par r√¥le
            print("\n4. Statistiques des r√¥les...")
            roles_stats = db.session.query(
                Utilisateur.role, 
                db.func.count(Utilisateur.utilisateur_id)
            ).group_by(Utilisateur.role).all()
            
            for role, count in roles_stats:
                print(f"   üìä {role}: {count} utilisateur(s)")
            
            # Test 5: Nettoyer (supprimer l'utilisateur de test)
            print("\n5. Nettoyage...")
            db.session.delete(retrieved_user)
            db.session.commit()
            print("   ‚úÖ Utilisateur de test supprim√©")
            
            print("\n" + "=" * 50)
            print("üéâ TOUS LES TESTS R√âUSSIS!")
            print("‚úÖ Le r√¥le SUPERVISEUR est correctement configur√©")
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERREUR: {str(e)}")
            print("üí° V√©rifiez que le script SQL a √©t√© ex√©cut√© correctement")
            db.session.rollback()
            return False

def create_superviseur_user():
    """Cr√©er un utilisateur superviseur permanent"""
    
    app = create_app()
    
    with app.app_context():
        print("üë§ Cr√©ation d'un utilisateur SUPERVISEUR permanent")
        print("=" * 50)
        
        try:
            # V√©rifier si l'utilisateur existe d√©j√†
            existing_user = Utilisateur.query.filter_by(login="superviseur").first()
            if existing_user:
                print("‚ö†Ô∏è  Un utilisateur 'superviseur' existe d√©j√†")
                print(f"   R√¥le actuel: {existing_user.role}")
                
                # Mettre √† jour le r√¥le si n√©cessaire
                if existing_user.role != "SUPERVISEUR":
                    existing_user.role = "SUPERVISEUR"
                    db.session.commit()
                    print("   ‚úÖ R√¥le mis √† jour vers SUPERVISEUR")
                return True
            
            # Cr√©er un nouvel utilisateur superviseur
            superviseur = Utilisateur(
                nom="Superviseur",
                prenom="Principal",
                login="superviseur",
                role="SUPERVISEUR",
                email="superviseur@udm.local",
                telephone="000000000"
            )
            superviseur.set_password("superviseur123")
            
            db.session.add(superviseur)
            db.session.commit()
            
            print("‚úÖ Utilisateur SUPERVISEUR cr√©√© avec succ√®s!")
            print("üìã D√©tails de connexion:")
            print(f"   Login: superviseur")
            print(f"   Mot de passe: superviseur123")
            print(f"   R√¥le: SUPERVISEUR")
            print(f"   Email: superviseur@udm.local")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ERREUR lors de la cr√©ation: {str(e)}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("üöÄ Script de test du r√¥le SUPERVISEUR")
    print("Choisissez une option:")
    print("1. Tester le r√¥le SUPERVISEUR")
    print("2. Cr√©er un utilisateur SUPERVISEUR permanent")
    print("3. Les deux")
    
    choice = input("\nVotre choix (1/2/3): ").strip()
    
    if choice in ["1", "3"]:
        print("\n" + "üîç" * 20)
        success = test_superviseur_role()
        if not success:
            sys.exit(1)
    
    if choice in ["2", "3"]:
        print("\n" + "üë§" * 20)
        success = create_superviseur_user()
        if not success:
            sys.exit(1)
    
    if choice not in ["1", "2", "3"]:
        print("‚ùå Choix invalide")
        sys.exit(1)
    
    print("\nüéâ Script termin√© avec succ√®s!")
