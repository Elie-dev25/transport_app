@startuml Conception_Model_Users
hide circle
skinparam classAttributeIconSize 0
skinparam defaultFontName Arial
skinparam defaultMonospaceFontName Arial
skinparam defaultFontSize 10
skinparam linetype ortho
skinparam shadowing false
skinparam wrapWidth 1200
skinparam nodesep 6
skinparam ranksep 220
top to bottom direction

title Sous-diagramme 1/4 â€” Utilisateurs et Ressources Humaines
class Utilisateur {
  - utilisateur_id : int
  - nom : varchar
  - prenom : varchar
  - login : varchar
  - email : varchar
  - telephone : varchar
  - mot_de_passe : varchar
  - role : enum
  + verifierMotDePasse(mdp : string) : boolean
  + aLeRole(role : enum) : boolean
  + changerMotDePasse(oldMdp : string, newMdp : string) : boolean
  + mettreAJourProfil(champs : Map) : void
  + supprimerCompte() : void
  + getRoles() : List
}

class Administrateur {
  - administrateur_id : int
  + creerUtilisateur(u : Utilisateur) : Utilisateur
  + modifierUtilisateur(id : int, champs : Map) : Utilisateur
  + supprimerUtilisateur(id : int) : void
  + genererRapport(dateDebut : date, dateFin : date) : RapportJournalier
}

class Responsable {
  - responsable_id : int
  + superviserAffectations() : List
  + validerPlanification(affId : int) : boolean
  + deleguerAuCharge(chargeId : int) : void
}

class ChargeTransport {
  - chargetransport_id : int
  + enregistrerTrajet(t : Trajet) : Trajet
  + mettreAJourPresence(p : PresenceCampus) : PresenceCampus
  + consulterRapports() : List
}

class Chauffeur {
  - chauffeur_id : int
  - numero_permis : varchar
  - telephone : varchar
  - date_delivrance_permis : date
  - date_expiration_permis : date
  + accepterTrajet(trajetId : int) : boolean
  + refuserTrajet(trajetId : int, raison : String) : void
  + signalerPanne(p : PanneBusUDM) : PanneBusUDM
  + consulterStatut() : ChauffeurStatut
}

class Mecanicien {
  - mecanicien_id : int
  - numero_permis : varchar
  - date_delivrance_permis : date
  - date_expiration_permis : date
  + enregistrerVidange(v : Vidange) : Vidange
  + enregistrerDepannage(d : Depannage) : Depannage
  + traiterDemandeHuile(demandeId : int, approuve : boolean) : void
  + consulterHistoriqueBus(aedId : int) : List
}

class Superviseur {
  - superviseur_id : int
  + surveillerOperations() : Report
  + alerterAdministrateur(msg : String) : void
}

class Affectation {
  - affectation_id : int
  - chauffeur_id : int
  - admin_id : int
  - type_affectation : enum
  - date_debut : date
  - date_fin : date
  + planifier() : void
  + modifierDates(d1 : date, d2 : date) : void
}

class ChauffeurStatut {
  - statut_id : int
  - chauffeur_id : int
  - statut : enum
  - date_debut : datetime
  - date_fin : datetime
  - created_at : datetime
  + estActif() : boolean
}

Administrateur --|> Utilisateur
Responsable --|> Utilisateur
ChargeTransport --|> Utilisateur
Chauffeur --|> Utilisateur
Mecanicien --|> Utilisateur
Superviseur --|> Utilisateur

' Associations pertinentes au sous-domaine
Affectation "0..*" -- "1" Chauffeur : affecter
Affectation "0..*" -- "0..1" Administrateur : planifier
Affectation "0..*" -- "0..1" Responsable : planifier
ChauffeurStatut "0..*" -- "1" Chauffeur : definir_statut

@enduml
