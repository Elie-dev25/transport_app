@startuml Conception_Model_WithMethods
hide circle
skinparam classAttributeIconSize 0
skinparam defaultFontName Arial
skinparam defaultMonospaceFontName Arial
skinparam defaultFontSize 10

title Diagramme de classe de conception
top to bottom direction

skinparam linetype ortho
skinparam shadowing false
skinparam wrapWidth 2000
skinparam nodesep 8
skinparam ranksep 420

package "Domaine" as Domaine {

class Utilisateur {
  - utilisateur_id : int
  - nom : varchar
  - prenom : varchar
  - login : varchar
  - email : varchar
  - telephone : varchar
  - mot_de_passe : varchar
  - role : enum
  + verifierMotDePasse(mdp : string) : boolean
  + aLeRole(role : enum) : boolean
  + changerMotDePasse(oldMdp : string, newMdp : string) : boolean
  + mettreAJourProfil(champs : Map) : void
  + supprimerCompte() : void
  + getRoles() : List
}

class Administrateur {
  - administrateur_id : int
  + creerUtilisateur(u : Utilisateur) : Utilisateur
  + modifierUtilisateur(id : int, champs : Map) : Utilisateur
  + supprimerUtilisateur(id : int) : void
  + genererRapport(dateDebut : date, dateFin : date) : RapportJournalier
}

class Responsable {
  - responsable_id : int
  + superviserAffectations() : List
  + validerPlanification(affId : int) : boolean
  + deleguerAuCharge(chargeId : int) : void
}

class Chauffeur {
  - chauffeur_id : int
  - numero_permis : varchar
  - telephone : varchar
  - date_delivrance_permis : date
  - date_expiration_permis : date
  + accepterTrajet(trajetId : int) : boolean
  + refuserTrajet(trajetId : int, raison : String) : void
  + signalerPanne(p : PanneBusUDM) : PanneBusUDM
  + consulterStatut() : ChauffeurStatut
}

class Mecanicien {
  - mecanicien_id : int
  - numero_permis : varchar
  - date_delivrance_permis : date
  - date_expiration_permis : date
  + enregistrerVidange(v : Vidange) : Vidange
  + enregistrerDepannage(d : Depannage) : Depannage
  + traiterDemandeHuile(demandeId : int, approuve : boolean) : void
  + consulterHistoriqueBus(aedId : int) : List
}

class ChargeTransport {
  - chargetransport_id : int
  + enregistrerTrajet(t : Trajet) : Trajet
  + mettreAJourPresence(p : PresenceCampus) : PresenceCampus
  + consulterRapports() : List
}

class Superviseur {
  - superviseur_id : int
  + surveillerOperations() : Report
  + alerterAdministrateur(msg : String) : void
}

class BusUDM {
  - busudm_id : int
  - numero : varchar
  - immatriculation : varchar
  - etat_vehicule : enum
  - nombre_places : int
  - kilometrage : int
  - numero_chassis : varchar
  - type_vehicule : enum
  - marque : varchar
  + estDisponible(date : date) : boolean
  + majKilometrage(km : int) : void
  + programmerMaintenance(date : date, type : String) : void
  + getDernieresOperations() : List
}

class DocumentBusUDM {
  - document_id : int
  - busudm_id : int
  - type_document : enum
  - date_debut : date
  - date_expiration : date
  + estValide() : boolean
  + renouveler(dateExpiration : date) : void
}

class FuelAlertState {
  - id : int
  - busudm_id : int
  - last_threshold : int
  + verifierSeuil(currentLevel : int) : boolean
  + notifierSiBas() : void
}

class Carburation {
  - carburation_id : int
  - busudm_id : int
  - date_carburation : date
  - kilometrage : int
  - quantite_litres : decimal
  - prix_unitaire : decimal
  - cout_total : decimal
  + calculerCout() : decimal
}

class Vidange {
  - vidange_id : int
  - busudm_id : int
  - date_vidange : date
  - kilometrage : int
  - type_huile : enum
  + planifier(date : date) : void
}

class PanneBusUDM {
  - panne_id : int
  - busudm_id : int
  - date_heure : datetime
  - description : text
  - criticite : enum
  - immobilisation : boolean
  - resolue : boolean
  + marquerResolu() : void
  + assignerDepannage(depannageId : int) : void
}

class Depannage {
  - depannage_id : int
  - busudm_id : int
  - date_heure : datetime
  - kilometrage : decimal
  - cout_reparation : decimal
  - description_panne : text
  - repare_par : varchar
  + ouvrir() : void
  + clore() : void
  + estCloture() : boolean
}

class Trajet {
  - trajet_id : int
  - busudm_id : int
  - chauffeur_id : int
  - charge_id : int
  - prestataire_id : int
  - type_trajet : enum
  - date_heure_depart : datetime
  - point_depart : enum
  - nombre_places_occupees : int
  - point_arriver : varchar
  - motif : varchar
  + planifier() : void
  + demarrer() : void
  + terminer() : void
  + annuler(raison : String) : void
}

class Prestataire {
  - prestataire_id : int
  - nom_prestataire : varchar
  - telephone : varchar
  - localisation : varchar
  - email : varchar
  + proposerTrajet(trajet : Trajet) : void
  + accepterContrat() : void
}

class Affectation {
  - affectation_id : int
  - chauffeur_id : int
  - admin_id : int
  - type_affectation : enum
  - date_debut : date
  - date_fin : date
  + planifier() : void
  + modifierDates(d1 : date, d2 : date) : void
}

class ChauffeurStatut {
  - statut_id : int
  - chauffeur_id : int
  - statut : enum
  - date_debut : datetime
  - date_fin : datetime
  - created_at : datetime
  + estActif() : boolean
}

class PresenceCampus {
  - presence_id : int
  - charge_id : int
  - date_presence : date
  - nombre_arrives : int
  - nombre_partis : int
  - nombre_presents : int
  + calculerPresents() : int
  + mettreAJour(arrives : int, partis : int) : void
}

class RapportJournalier {
  - rapport_id : int
  - admin_id : int
  - date_rapport : date
  - contenu : text
  - date_creation : datetime
  + genererPdf() : File
  + envoyer(destinataires : List) : void
}

class Notification {
  - notification_id : int
  - utilisateur_id : int
  - message : varchar
  - date_notification : datetime
  - lue : boolean
  + marquerLue() : void
  + envoyer() : void
}

class ConnexionHistorique {
  - log_id : int
  - utilisateur_id : int
  - date_connexion : datetime
  - ip_adresse : varchar
  + enregistrer() : void
}

class DemandeHuile {
  - demande_huile_id : int
  - busudm_id : int
  - mecanicien_id : int
  - date_demande : date
  - statut_demande : enum
  - numero_aed : varchar
  + aprover() : void
  + rejeter(raison : String) : void
}

' Associations (lignes simples, mêmes que ta version précédente)
BusUDM "1" -- "0..*" Carburation : ravitailler
BusUDM "1" -- "0..*" Vidange : vidanger
BusUDM "1" -- "0..*" PanneBusUDM : signaler
BusUDM "1" -- "0..*" Depannage : depanner
BusUDM "1" -- "0..*" DocumentBusUDM : documenter
BusUDM "1" -- "0..1" FuelAlertState : alerter

Trajet "0..*" -- "0..1" Prestataire : engager
Trajet "0..*" -- "0..1" Chauffeur : conduire
Trajet "0..*" -- "0..1" BusUDM : utiliser
Trajet "0..*" -- "0..1" ChargeTransport : enregistrer

Affectation "0..*" -- "1" Chauffeur : affecter
Affectation "0..*" -- "0..1" Administrateur : planifier
Affectation "0..*" -- "0..1" Responsable : planifier

ChauffeurStatut "0..*" -- "1" Chauffeur : definir_statut

PresenceCampus "0..*" -- "0..1" ChargeTransport : mettre_a_jour

RapportJournalier "0..*" -- "1" Administrateur : rediger
RapportJournalier "0..*" -- "1" Responsable : rediger

Notification "0..*" -- "1" Utilisateur : notifier
ConnexionHistorique "0..*" -- "1" Utilisateur : enregistrer

DemandeHuile "0..*" -- "0..1" Mecanicien : traiter
DemandeHuile "0..*" -- "0..1" BusUDM : demander

} 

@enduml
