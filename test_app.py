#!/usr/bin/env python3
"""
Test simple de l'application apr√®s correction des d√©pendances
"""

def test_imports():
    """Test des imports principaux"""
    print("üß™ Test des imports...")
    
    try:
        import flask
        print(f"‚úÖ Flask {flask.__version__}")
    except Exception as e:
        print(f"‚ùå Flask: {e}")
        return False
    
    try:
        import flask_wtf
        print(f"‚úÖ Flask-WTF {flask_wtf.__version__}")
    except Exception as e:
        print(f"‚ùå Flask-WTF: {e}")
        return False
    
    try:
        import werkzeug
        print(f"‚úÖ Werkzeug {werkzeug.__version__}")
    except Exception as e:
        print(f"‚ùå Werkzeug: {e}")
        return False
    
    return True

def test_app_creation():
    """Test de cr√©ation de l'application"""
    print("\nüß™ Test de cr√©ation de l'application...")
    
    try:
        from app import create_app
        app = create_app()
        print("‚úÖ Application Flask cr√©√©e avec succ√®s")
        return True, app
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation app: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def test_forms():
    """Test des formulaires"""
    print("\nüß™ Test des formulaires...")
    
    try:
        from app.forms.login_form import LoginForm
        form = LoginForm()
        print("‚úÖ LoginForm cr√©√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur formulaires: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_app_context():
    """Test du contexte d'application"""
    print("\nüß™ Test du contexte d'application...")
    
    try:
        from app import create_app
        app = create_app()
        
        with app.app_context():
            print("‚úÖ Contexte d'application fonctionne")
            
            # Test des mod√®les
            try:
                from app.models.utilisateur import Utilisateur
                print("‚úÖ Mod√®les import√©s avec succ√®s")
            except Exception as e:
                print(f"‚ö†Ô∏è  Mod√®les: {e} (normal si pas de DB)")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur contexte: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_routes():
    """Test des routes"""
    print("\nüß™ Test des routes...")
    
    try:
        from app import create_app
        app = create_app()
        
        with app.test_client() as client:
            # Test de la route d'accueil
            response = client.get('/')
            print(f"‚úÖ Route '/' - Status: {response.status_code}")
            
            # Test de la route de login
            response = client.get('/login')
            print(f"‚úÖ Route '/login' - Status: {response.status_code}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur routes: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Test complet"""
    print("üöÄ TEST COMPLET DE L'APPLICATION TRANSPORT UDM")
    print("=" * 60)
    
    tests = [
        ("Imports", test_imports),
        ("Cr√©ation App", test_app_creation),
        ("Formulaires", test_forms),
        ("Contexte App", test_app_context),
        ("Routes", test_routes)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            if test_name == "Cr√©ation App":
                success, app = test_func()
                results.append((test_name, success))
            else:
                success = test_func()
                results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS√â" if success else "‚ùå √âCHOU√â"
        print(f"{test_name:20} : {status}")
        if success:
            passed += 1
    
    print(f"\nüìà R√âSULTAT: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ TOUS LES TESTS PASSENT!")
        print("‚úÖ Votre application est pr√™te √† fonctionner")
        print("\nüí° Pour d√©marrer l'application:")
        print("   python run.py")
    elif passed >= total - 1:
        print("‚ö†Ô∏è  PRESQUE TOUS LES TESTS PASSENT")
        print("L'application devrait fonctionner malgr√© quelques probl√®mes mineurs")
    else:
        print("‚ùå PLUSIEURS TESTS √âCHOUENT")
        print("Il y a encore des probl√®mes √† r√©soudre")
    
    return passed == total

if __name__ == "__main__":
    main()
